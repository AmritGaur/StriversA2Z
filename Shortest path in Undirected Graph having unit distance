https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph-having-unit-distance/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=shortest-path-in-undirected-graph-having-unit-distance

class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        // MAKE AN ADJACENCY LIST
        vector<int> adj[N];
        for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        // MAKE A DISTANCE ARRAY AND INITIALIZE IT WITH -1
        vector<int> dis(N,-1);
        queue<int>q;
        q.push(src);
        q.push(101);
        dis[src]=0;
        int c=1;
        while(q.size()!=1){
            int x=q.front();
            q.pop();
            if(x==101){
                c++;
                q.push(101);
            }
            // RELAX ALL THE ADJACENT ELEMENTS OF X
            for(int u:adj[x]){
                if(dis[u]==-1){
                    dis[u]=c;
                    q.push(u);
                }
            }
        }
        return dis;
    }
};
